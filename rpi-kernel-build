#!/bin/sh

# rpi-kernel-build
# Copyright (C) 2020 Ryan Finnie
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

set -e

script_dir="$(dirname "$(readlink -f "$0")")"
if [ -z "${RC_FILE}" ]; then
  if [ -e "${script_dir}/rpi-kernel-build.rc" ]; then
    RC_FILE="${script_dir}/rpi-kernel-build.rc"
  fi
fi
if [ -n "${RC_FILE}" ]; then
  . "${RC_FILE}"
fi

[ -n "${GIT_CHECKOUT}" ] || GIT_CHECKOUT="${script_dir}/linux"
[ -n "${GIT_REMOTE}" ] || GIT_REMOTE="origin"
[ -n "${GIT_BRANCH}" ] || GIT_BRANCH="rpi-4.19.y"
[ -n "${GIT_CHECKOUT_SPEC}" ] || GIT_CHECKOUT_SPEC="${GIT_REMOTE}/${GIT_BRANCH}"
[ -n "${IMAGE_DIR}" ] || IMAGE_DIR="${script_dir}/images"
[ -n "${CROSS_COMPILE}" ] || CROSS_COMPILE=""
[ -n "${DEFCONFIG}" ] || DEFCONFIG="bcm2711_defconfig"
[ -n "${JOBS}" ] || JOBS="$(nproc)"
[ -n "${BIS}" ] || BIS=0
[ -n "${GIT_FETCH}" ] || GIT_FETCH=1
[ -n "${BIS_SCRIPT}" ] || BIS_SCRIPT="${script_dir}/bcm2711-kernel-configure-bis"
[ -n "${EXTRA_REV}" ] || EXTRA_REV=""
[ -n "${TARBALL_BASE}" ] || TARBALL_BASE="bcm2711-kernel"
[ -n "${ASSEMBLE_SOURCE}" ] || ASSEMBLE_SOURCE=1

series_append=""
if [ "${DEFCONFIG}" = "bcm2711_defconfig" ]; then
  series_append="-p4"
fi

work_dir="$(mktemp -d)"
echo "Work directory: ${work_dir}"
cd "${work_dir}"
mkdir -p "${work_dir}/build"

echo "Cleaning and updating repository"
git -C "${GIT_CHECKOUT}" clean -x -f -f
if [ "$GIT_FETCH" = 1 ]; then
  git -C "${GIT_CHECKOUT}" fetch "${GIT_REMOTE}" "${GIT_BRANCH}"
fi
git -C "${GIT_CHECKOUT}" checkout "${GIT_CHECKOUT_SPEC}"
git_rev="$(git -C "${GIT_CHECKOUT}" log -n1 --format="%h")"
git_date="$(git -C "${GIT_CHECKOUT}" show -s --format=%ci "${git_rev}" | perl -ne '/^(\d{4})-(\d{2})-(\d{2})/ && print $1 . $2 . $3')"
extra_version="-${git_date}-g${git_rev}${EXTRA_REV}${series_append}"
if [ "$BIS" = 1 ]; then
  extra_version="${extra_version}-bis"
fi

echo "Configuring"
make -C "${GIT_CHECKOUT}" ARCH=arm64 CROSS_COMPILE="${CROSS_COMPILE}" distclean || true
make -C "${GIT_CHECKOUT}" ARCH=arm64 O="${work_dir}/build" CROSS_COMPILE="${CROSS_COMPILE}" "${DEFCONFIG}"
(cd "${work_dir}/build" && "${GIT_CHECKOUT}/scripts/config" --set-str CONFIG_LOCALVERSION "${extra_version}")
if [ "$BIS" = 1 ]; then
  echo "Applying -bis changes"
  cp "${work_dir}/build/.config" "${work_dir}/build/.config.defconfig"
  (
    cd "${work_dir}/build"
    export GIT_CHECKOUT
    . "${BIS_SCRIPT}"
  )
fi
# LOCALVERSION="" doesn't override CONFIG_LOCALVERSION above.  It
# actually appends to it, but more importantly, it supresses "+"
# version appending.
make -C "${GIT_CHECKOUT}" LOCALVERSION="" ARCH=arm64 O="${work_dir}/build" CROSS_COMPILE="${CROSS_COMPILE}" olddefconfig
make -C "${GIT_CHECKOUT}" LOCALVERSION="" ARCH=arm64 O="${work_dir}/build" CROSS_COMPILE="${CROSS_COMPILE}" prepare

kernel_version="$(make -s -C "${GIT_CHECKOUT}" LOCALVERSION="" ARCH=arm64 O="${work_dir}/build" CROSS_COMPILE="${CROSS_COMPILE}" kernelrelease)"
if [ -e "${IMAGE_DIR}/${TARBALL_BASE}-${kernel_version}.tar.xz" ]; then
  echo "${IMAGE_DIR}/${TARBALL_BASE}-${kernel_version}.tar.xz exists, not compiling again"
  cd /
  rm -rf "${work_dir}"
  exit 0
fi

echo "Compiling"
make -C "${GIT_CHECKOUT}" LOCALVERSION="" ARCH=arm64 O="${work_dir}/build" CROSS_COMPILE="${CROSS_COMPILE}" -j${JOBS}

echo "Assembling tarball"
mkdir -p "${work_dir}/destdir/boot/overlays"
make -C "${GIT_CHECKOUT}" LOCALVERSION="" ARCH=arm64 O="${work_dir}/build" CROSS_COMPILE="${CROSS_COMPILE}" INSTALL_MOD_PATH="${work_dir}/destdir" modules_install
rm -f "${work_dir}/destdir/lib/modules/${kernel_version}/source" "${work_dir}/destdir/lib/modules/${kernel_version}/build"
ln -sf "/usr/src/linux-${kernel_version}" "${work_dir}/destdir/lib/modules/${kernel_version}/build"
cp "${work_dir}/build/arch/arm64/boot/Image" "${work_dir}/destdir/boot/kernel8${series_append}.img"
cp "${GIT_CHECKOUT}/COPYING" "${work_dir}/destdir/boot/COPYING.linux"
cp "${work_dir}/build/.config" "${work_dir}/destdir/boot/config${series_append}"
if [ -e "${work_dir}/build/.config.defconfig" ]; then
  (cd "${work_dir}/build" && diff -u .config.defconfig .config) >"${work_dir}/destdir/boot/config${series_append}-bis.diff" || true
fi
xz -9 -c <"${work_dir}/build/System.map" >"${work_dir}/destdir/boot/System${series_append}.map.xz"
if [ "${DEFCONFIG}" = "bcm2711_defconfig" ]; then
  cp "${work_dir}/build/arch/arm64/boot/dts/broadcom"/bcm*-rpi-4-*.dtb "${work_dir}/destdir/boot/"
  base64 -d <<"EOM" | gunzip -c >"${work_dir}/destdir/boot/armstub8-gic.bin"
H4sIAJ1SaF4CA9VQsUoDQRScu93iwGYNKQyG3JIfSDojWOwJ/sARSLDJVeInxCpbhPQRey2ChdUV
QbxKBfUDFt7VW1lrKm1cH1Z+gI0Dj3nz5hXD4O3epUAVocyjBJUp9ymT1gHRjSlbBIkx/C7NfJv8
bOHMdof0LfvMSKzTmxb1gAsI/lNt0mfsmQ4VgNLMXlzW1xjQizTnr8D6SEBNtKDV9OTjKYQ1YJ0A
miuBnYInYh3/3KyzSGv7ucc20E+e+/gDbI2+jn/rK87WjTFOpdlw5mEBmxvuI5Nm6Q9srnn3KbNE
dYh4Ce6GMzag8J6d6rvHEIYPYlJDzQP+Ib4BWs0hFgACAAA=
EOM
elif [ "${DEFCONFIG}" = "bcmrpi3_defconfig" ]; then
  cp "${work_dir}/build/arch/arm64/boot/dts/broadcom"/bcm*-rpi-3-*.dtb "${work_dir}/destdir/boot/"
fi
cp "${GIT_CHECKOUT}/arch/arm/boot/dts/overlays/README" "${work_dir}/build/arch/arm64/boot/dts/overlays"/*.dtb* "${work_dir}/destdir/boot/overlays/"

find "${work_dir}/destdir" -type d -print0 | xargs -0 chmod 0755
find "${work_dir}/destdir" -type f -print0 | xargs -0 chmod 0644

mkdir -p "${IMAGE_DIR}"
tar Jcvf "${IMAGE_DIR}/${TARBALL_BASE}-${kernel_version}.tar.xz" --owner=root --group=root -C "${work_dir}/destdir" .

if [ "$ASSEMBLE_SOURCE" = 1 ]; then
  echo "Assembling source tarball"
  mkdir -p "${work_dir}/source"
  rsync -a --exclude='.git*' "${GIT_CHECKOUT}/" "${work_dir}/source/linux-${kernel_version}/"
  cp "${work_dir}/build/.config" "${work_dir}/source/linux-${kernel_version}/"
  cp "${work_dir}/build/Module.symvers" "${work_dir}/source/linux-${kernel_version}/"
  tar Jcf "${IMAGE_DIR}/${TARBALL_BASE}-source-${kernel_version}.tar.xz" --owner=root --group=root -C "${work_dir}/source" "linux-${kernel_version}"
fi

echo "Cleaning"
cd /
rm -rf "${work_dir}"

echo "Done"
