#!/bin/sh

# rpi-kernel-build
# Copyright (C) 2020-2021 Ryan Finnie
# SPDX-License-Identifier: MPL-2.0

set -e

script_dir="$(dirname "$(readlink -f "$0")")"
if [ -z "${RC_FILE}" ]; then
  if [ -e "${script_dir}/rpi-kernel-build.rc" ]; then
    RC_FILE="${script_dir}/rpi-kernel-build.rc"
  fi
fi
if [ -n "${RC_FILE}" ]; then
  . "${RC_FILE}"
fi

[ -n "${GIT_CHECKOUT}" ] || GIT_CHECKOUT="${script_dir}/linux"
[ -n "${GIT_REMOTE}" ] || GIT_REMOTE="origin"
[ -n "${GIT_BRANCH}" ] || GIT_BRANCH="rpi-5.15.y"
[ -n "${GIT_CHECKOUT_SPEC}" ] || GIT_CHECKOUT_SPEC="${GIT_REMOTE}/${GIT_BRANCH}"
[ -n "${IMAGE_DIR}" ] || IMAGE_DIR="${script_dir}/images"
[ -n "${CROSS_COMPILE}" ] || CROSS_COMPILE=""
[ -n "${ARCH}" ] || ARCH="arm64"
[ -n "${PLATFORM}" ] || PLATFORM="bcm2711"
[ -n "${DEFCONFIG}" ] || DEFCONFIG="${PLATFORM}_defconfig"
[ -n "${JOBS}" ] || JOBS="$(nproc)"
[ -n "${BIS}" ] || BIS=0
[ -n "${GIT_FETCH}" ] || GIT_FETCH=1
[ -n "${EXTRA_SCRIPT}" ] || EXTRA_SCRIPT=""
[ -n "${EXTRA_REV}" ] || EXTRA_REV=""
[ -n "${TARBALL_BASE}" ] || TARBALL_BASE="rpi-kernel"
[ -n "${ASSEMBLE_SOURCE}" ] || ASSEMBLE_SOURCE=1

if [ "${BIS}" = 1 ]; then
  EXTRA_SCRIPT="${script_dir}/scripts/configure-bis"
  EXTRA_REV="-bis"
fi

if [ "${CROSS_COMPILE}" = "yes" ]; then
  if [ "${ARCH}" = "arm64" ]; then
    CROSS_COMPILE="aarch64-linux-gnu-"
  elif [ "${ARCH}" = "arm" ]; then
    CROSS_COMPILE="arm-linux-gnueabi-"
  else
    CROSS_COMPILE=""
  fi
fi

if [ -n "${EXTRA_SCRIPT}" ]; then
  EXTRA_SCRIPT="$(readlink -f "${EXTRA_SCRIPT}")"
fi

work_dir="$(mktemp -d)"
echo "Work directory: ${work_dir}"
cd "${work_dir}"
mkdir -p "${work_dir}/build"

echo "Cleaning and updating repository"
git -C "${GIT_CHECKOUT}" clean -x -f -f
if [ "$GIT_FETCH" = 1 ]; then
  git -C "${GIT_CHECKOUT}" fetch "${GIT_REMOTE}" "${GIT_BRANCH}"
fi
git -C "${GIT_CHECKOUT}" checkout "${GIT_CHECKOUT_SPEC}"
git_rev="$(git -C "${GIT_CHECKOUT}" log -n1 --format="%h")"
git_date="$(git -C "${GIT_CHECKOUT}" show -s --format=%ci "${git_rev}" | perl -ne '/^(\d{4})-(\d{2})-(\d{2})/ && print $1 . $2 . $3')"
extra_version="-${git_date}-g${git_rev}-${ARCH}-${PLATFORM}${EXTRA_REV}"

echo "Configuring"
make -C "${GIT_CHECKOUT}" ARCH="${ARCH}" CROSS_COMPILE="${CROSS_COMPILE}" distclean || true
make -C "${GIT_CHECKOUT}" ARCH="${ARCH}" O="${work_dir}/build" CROSS_COMPILE="${CROSS_COMPILE}" "${DEFCONFIG}"
(cd "${work_dir}/build" && "${GIT_CHECKOUT}/scripts/config" --set-str CONFIG_LOCALVERSION "${extra_version}")
if [ -n "${EXTRA_SCRIPT}" ]; then
  echo "Applying ${EXTRA_SCRIPT}"
  (
    cd "${work_dir}/build"
    export GIT_CHECKOUT ARCH PLATFORM DEFCONFIG CROSS_COMPILE
    . "${EXTRA_SCRIPT}"
  )
fi
# LOCALVERSION="" doesn't override CONFIG_LOCALVERSION above.  It
# actually appends to it, but more importantly, it supresses "+"
# version appending.
make -C "${GIT_CHECKOUT}" LOCALVERSION="" ARCH="${ARCH}" O="${work_dir}/build" CROSS_COMPILE="${CROSS_COMPILE}" olddefconfig
make -C "${GIT_CHECKOUT}" LOCALVERSION="" ARCH="${ARCH}" O="${work_dir}/build" CROSS_COMPILE="${CROSS_COMPILE}" prepare

kernel_version="$(make -s -C "${GIT_CHECKOUT}" LOCALVERSION="" ARCH="${ARCH}" O="${work_dir}/build" CROSS_COMPILE="${CROSS_COMPILE}" kernelrelease)"
if [ -e "${IMAGE_DIR}/${TARBALL_BASE}-${kernel_version}.tar.xz" ]; then
  echo "${IMAGE_DIR}/${TARBALL_BASE}-${kernel_version}.tar.xz exists, not compiling again"
  cd /
  rm -rf "${work_dir}"
  exit 0
fi

echo "Compiling"
make -C "${GIT_CHECKOUT}" LOCALVERSION="" ARCH="${ARCH}" O="${work_dir}/build" CROSS_COMPILE="${CROSS_COMPILE}" -j${JOBS}

echo "Assembling tarball"
mkdir -p "${work_dir}/destdir/boot/overlays"
make -C "${GIT_CHECKOUT}" LOCALVERSION="" ARCH="${ARCH}" O="${work_dir}/build" CROSS_COMPILE="${CROSS_COMPILE}" INSTALL_MOD_PATH="${work_dir}/destdir" modules_install
rm -f "${work_dir}/destdir/lib/modules/${kernel_version}/source" "${work_dir}/destdir/lib/modules/${kernel_version}/build"
ln -sf "/usr/src/linux-${kernel_version}" "${work_dir}/destdir/lib/modules/${kernel_version}/build"
cp "${work_dir}/build/arch/${ARCH}/boot/Image" "${work_dir}/destdir/boot/kernel.img-${ARCH}-${PLATFORM}"
cp "${work_dir}/build/.config" "${work_dir}/destdir/boot/config-${ARCH}-${PLATFORM}"
if [ -d "${work_dir}/build/arch/${ARCH}/boot/dts/broadcom" ]; then
  dtsdir="${work_dir}/build/arch/${ARCH}/boot/dts/broadcom"
else
  dtsdir="${work_dir}/build/arch/${ARCH}/boot/dts"
fi
cp "${dtsdir}"/bcm*-rpi*.dtb "${work_dir}/destdir/boot/"
cp "${GIT_CHECKOUT}/arch/arm/boot/dts/overlays/README" "${work_dir}/build/arch/${ARCH}/boot/dts/overlays"/*.dtb* "${work_dir}/destdir/boot/overlays/"

find "${work_dir}/destdir" -type d -print0 | xargs -0 chmod 0755
find "${work_dir}/destdir" -type f -print0 | xargs -0 chmod 0644

mkdir -p "${IMAGE_DIR}"
tar Jcf "${IMAGE_DIR}/${TARBALL_BASE}-${kernel_version}.tar.xz" --owner=root --group=root -C "${work_dir}/destdir" .

if [ "$ASSEMBLE_SOURCE" = 1 ]; then
  echo "Assembling source tarball"
  mkdir -p "${work_dir}/source/linux-${kernel_version}"
  cp "${work_dir}/build/.config" "${work_dir}/source/linux-${kernel_version}/"
  cp "${work_dir}/build/System.map" "${work_dir}/source/linux-${kernel_version}/"
  cp "${work_dir}/build/Module.symvers" "${work_dir}/source/linux-${kernel_version}/"
  tar Jcf "${IMAGE_DIR}/${TARBALL_BASE}-source-${kernel_version}.tar.xz" \
    --owner=root --group=root --exclude='.git*' --transform='s,^\.,linux-'"${kernel_version}"',g' \
    -C "${GIT_CHECKOUT}" . -C "${work_dir}/source/linux-${kernel_version}" .
fi

echo "Cleaning"
cd /
rm -rf "${work_dir}"

echo "Done"
